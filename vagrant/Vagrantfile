Vagrant::Config.run do |config|
  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "precise32"

  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  config.vm.box_url = "http://files.vagrantup.com/precise32.box"

  config.vm.host_name = "pirol"

  # Assign this VM to a host-only network IP, allowing you to access it
  # via the IP. Host-only networks can talk to the host machine as well as
  # any other machines on the same network, but cannot be accessed (through this
  # network interface) by any external networks.
  config.vm.network :hostonly, "192.168.33.10"

  # Assign this VM to a bridged network, allowing you to connect directly to a
  # network using the host's network device. This makes the VM appear as another
  # physical device on your network.
  # config.vm.network :bridged

  # Forward a port from the guest to the host, which allows for outside
  # computers to access the VM, whereas host only networking does not.
  config.vm.forward_port 80, 8080
  config.vm.forward_port 443, 8443 # https
  config.vm.forward_port 3306, 3306	# mysql

  # Share an additional folder to the guest VM. The first argument is
  # an identifier, the second is the path on the guest to mount the
  # folder, and the third is the path on the host to the actual folder.
#  if (/cygwin|mswin|mingw|bccwin|wince|emx/ =~ RUBY_PLATFORM) == nil
#    # Use nfs
#    config.vm.share_folder "v-oxid", "/var/www/pirol", "../oxid", :nfs => true, :extra => 'dmode=777,fmode=777'
#    # This uses uid and gid of the user that started vagrant
#    config.nfs.map_uid = Process.uid
#    config.nfs.map_gid = Process.gid
#  else
	config.vm.share_folder "v-oxid", "/var/www/pirol", "../oxid", :owner=> 'vagrant', :group=>'www-data', :extra => 'dmode=777,fmode=777'
#  end

  config.vm.share_folder "v-test", "/var/www/test", "../test"
  config.vm.share_folder "v-db", "/var/www/db", "../db"
  config.vm.share_folder "v-all", "/pirol", ".."

  # Set proxy in the VM - remove this if necessary
  # config.vm.provision :shell, :inline => "echo 'export http_proxy=http://proxy.ivu-ag.com:8080; export https_proxy=http://proxy.ivu-ag.com:8080' >> /etc/profile.d/proxy.sh; echo 'http_proxy=\"http://proxy.ivu-ag.com:8080\"' >> /etc/environment; echo 'https_proxy=\"http://proxy.ivu-ag.com:8080\"' >> /etc/environment;"

  # Optional RAM/CPU override
  config.vm.customize ["modifyvm", :id, "--memory", "2048"]
  config.vm.customize ["modifyvm", :id, "--cpus", 4]

  # Enable provisioning with Puppet stand alone.  Puppet manifests
  # are contained in a directory path relative to this Vagrantfile.
  # You will need to create the manifests directory and a manifest in
  # the file ubuntu-1104-server-amd64-with-puppet-support.pp in the manifests_path directory.
  #
  config.vm.provision :puppet do |puppet|
  #  puppet.options = "--verbose --debug"
    puppet.manifests_path = "puppet"
    puppet.module_path = "puppet/modules"
    puppet.manifest_file = "site.pp"
    puppet.facter = [
        ['db_username',  'oxid'],
        ['db_password',  'oxid'],
#		['proxy',        'http://proxy.ivu-ag.com:8080'],
    ]
  end
end
